#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Define a structure for an edge in the graph
struct Edge {
    int to, weight;
    Edge(int t, int w) : to(t), weight(w) {}
};

// Function to apply Dijkstra's algorithm
vector<int> dijkstra(int start, const vector<vector<Edge>>& graph) {
    int n = graph.size();
    vector<int> dist(n, INT_MAX);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    dist[start] = 0;
    pq.push({0, start});

    while (!pq.empty()) {
        int current = pq.top().second;
        int current_dist = pq.top().first;
        pq.pop();

        if (current_dist > dist[current])
            continue;

        for (const auto& edge : graph[current]) {
            int next = edge.to;
            int next_dist = current_dist + edge.weight;

            if (next_dist < dist[next]) {
                dist[next] = next_dist;
                pq.push({next_dist, next});
            }
        }
    }
    return dist;
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        vector<vector<Edge>> graph(n + 1);

        for (int i = 0; i < n; ++i) {
            int k, m;
            cin >> k >> m;

            for (int j = 0; j < m; ++j) {
                int node, weight;
                cin >> node >> weight;
                graph[k].emplace_back(node, weight);
            }
        }

        vector<int> shortest_paths = dijkstra(1, graph);

        int sum = 0;
        for (int i = 2; i <= n; ++i) {
            if (shortest_paths[i] != INT_MAX) {
                sum += shortest_paths[i];
            }
        }

        cout << sum << endl;
    }

    return 0;
}
